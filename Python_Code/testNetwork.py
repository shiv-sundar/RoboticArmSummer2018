# -*- coding: utf-8 -*-
"""
Created on Mon Jun 11 12:09:54 2018

@author: Shivkarthi
"""

import numpy as np
import matplotlib.pyplot as plt

def nonlin(x, deriv = False):
    if (deriv == True):
        return x * (1 - x)
    return 1/(1+np.exp(-x))

#syn0 = np.array([[0.338025, 2.20877, -3.64458, -0.883258, -0.707906, 4.31683, 0.523769, 0.216905, -0.369445, 3.18163, -0.0192105, 0.929304, 0.361433, 0.0921098, -1.12044, 5.78534, -1.17409, -0.91748, -0.358845, -0.258982, -3.48263, 1.2494, -1.8755, 0.21361, 1.5448, -1.5434, 0.236385, 1.18757, 0.23049, 0.460511, -1.54022, 0.930512, 2.74545, -0.200901, 0.881409, -2.81166, 6.15003, -1.28327, -0.910594, -2.42951, -2.67707, 1.7081, -0.700834, 0.105913, -0.107859, -1.61302, -1.04958, -7.83236, -0.0250139, -0.337237, -0.494588, -1.26513, 1.24386, -2.90473, 5.28968, -1.01878, 1.45515, -6.67801, 1.33796, -3.87363, 0.333784, 0.514564, -1.44424, 0.335153, -2.02332, 3.04776, 0.284613, -0.930354, 0.770755, -15.8825, 0.880966, 2.17382, -0.339927, 1.17771, 0.382992, 4.614, -0.880534, -7.25062, 0.931676, 3.3371, 1.50019, 0.152868, 0.361074, 1.2614, -0.0956417, 0.363927, 2.01734, 0.215345, -0.234415, 0.524984, -6.11354, 1.91536, 2.35344, -0.358837, -4.44609, -0.335198, -0.376513, 3.87144, 0.206226, -0.336299], 
#[-0.843212, -1.36736, 0.927316, -0.316622, -0.086565, -0.660315, 0.80339, -0.165589, -0.104555, 1.12152, -0.341925, -0.0525982, -0.426714, 0.531354, 0.727606, 1.20179, 0.748454, -0.128527, 0.446129, -0.951229, -0.212293, 2.02039, 1.38438, 0.333361, 0.479775, -0.478314, 0.887141, -2.87289, -0.158222, 2.89791, -0.477276, -1.06217, 1.66092, -0.172639, 0.318382, -0.869873, 5.34778, 0.519367, 4.16667, -3.95193, 1.56922, -1.26946, -0.824248, 2.95321, -4.58414, 0.869294, 0.699701, 0.139571, -0.36302, 0.841969, 0.10164, -2.038, 2.01215, 1.20991, 1.11112, 0.686442, -0.346099, 1.78035, -0.5301, 0.076587, -0.834427, 1.41492, -0.75502, -0.83726, -1.81418, -6.79358, 0.214216, 0.0543753, 0.630204, -1.30436, 0.318849, 2.65325, 0.847494, -0.489619, 0.112183, -2.48463, -0.316599, -3.24885, -0.0517434, -3.23366, 0.460285, 1.39664, -0.429176, 2.03844, 1.90712, -0.416039, 1.80859, 0.339962, -0.876852, 0.805074, -1.23671, -1.40551, -1.43067, 0.443926, -2.22145, 0.837781, -0.107371, -0.0729305, -0.171806, 0.840036]])

#syn1 = np.array([[11.6592], 
#[-13.0641], 
#[51.0042], 
#[21.4087], 
#[-18.0498], 
#[34.9332], 
#[29.3248], 
#[14.9856], 
#[7.5548], 
#[-41.5857], 
#[-13.9946], 
#[-17.2466], 
#[-12.2501], 
#[22.1155], 
#[-7.12319], 
#[34.7448], 
#[-9.23983], 
#[-18.5638], 
#[17.1263], 
#[19.0058], 
#[27.7135], 
##[-19.768], 
#[11.1016], 
#[-9.79241], 
#[23.5234], 
#[-23.1448], 
#[-16.7232], 
#[-59.0088], 
#[14.2315], 
#[10.8301], 
#[-21.2979], 
#[11.3491], 
#[54.5868], 
#[-13.2778], 
#[-17.5758], 
#[14.8581], 
#[-40.9198], 
#[11.2388], 
#[-17.8553], 
#[-50.9949], 
#[17.5062], 
#[-9.74265], 
#[-27.9976], 
#[21.0129], 
#[22.3431], 
#[-11.4261], 
#[-7.61564], 
#[-50.9465], 
#[-18.3497], 
#[-8.70408], 
#[-15.6929], 
#[28.4378], 
#[-17.5095], 
#[-15.4505], 
#[24.1253], 
#[-6.39401], 
#[31.5492], 
#[-26.5981], 
#[-12.9893], 
#[41.2178], 
#[9.63637], 
#[22.1505], 
#[-47.6347], 
#[10.221], 
#[-30.4538], 
#[24.2315], 
#[15.0946], 
#[17.6724], 
#[-53.9401], 
#[85.2821], 
#[-16.292], 
#[-16.1084], 
#[-9.68636], 
#[-8.26987], 
#[-7.70382], 
#[28.7918], 
#[18.9239], 
#[-18.5251], 
#[-14.3651], 
#[23.6235], 
#[19.8693], 
#[-18.3297], 
#[-13.1673], 
#[-27.1385], 
#[25.0091], 
#[-9.08901], 
#[25.5921], 
#[-18.8226], 
#[18.2696], 
#[30.8371], 
#[-61.7279], 
#[-11.1552], 
#[-20.4182], 
#[14.9608], 
#[77.8857], 
#[-7.88527], 
#[7.87628], 
#[-33.7066], 
#[15.7246], 
#[-8.13585]])

inputs = np.array([[-1.1810995823462123, 1.0514404799797124], 
[-1.3173450460026486, 1.3365515488092259], 
[10.073037261161806, 2.110748716709226], 
[9.942204366416783, -8.512234407051352], 
[-2.2840948392089695, 12.887850941589068], 
[0.0, -25.0], 
[0.0, 25.0], 
[0.0, 0.0], 
[-25.0, 0.0], 
[25.0, 0.0]])
    
#corroutput = np.arctan(np.divide(inputs[:,0], inputs[:,1]))
outputs = nonlin(np.dot(nonlin(np.dot(inputs, syn0)), syn1))
print(outputs)
#plt.scatter(range(1, outputs.size + 1), outputs, color = "blue")
#plt.scatter(corroutput, color = "red")
#plt.show()