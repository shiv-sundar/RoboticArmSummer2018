# -*- coding: utf-8 -*-
"""
Spyder Editor

This is a temporary script file.
"""

import numpy as np

def nonlin(x, deriv = False):
    if (deriv == True):
        return x * (1 - x)
    return 1/(1+np.exp(-x))

np.random.seed(1)
X = np.array([[0.27606272032607904, 0.608661028796399], 
[0.48612576588208906, 0.5031780321587854], 
[0.5682475006216212, 0.6903662256271089], 
[0.4976400580733673, 0.4996195062359215], 
[0.3383891679056214, 0.5570627861954373], 
[0.5993527249007476, 0.5940604414316547], 
[0.1895643455499447, 0.7579233880087073], 
[0.5004102889174036, 0.49743633972435797], 
[0.5385569571299368, 0.5597740778420467], 
[0.5294179641657603, 0.6229303265086689], 
[0.8028433053698061, 0.7795095667409108], 
[0.8267391208063909, 0.4939051270441072], 
[0.4332764094759956, 0.5402012608558483], 
[0.42572094570902436, 0.5428866317026987], 
[0.4644161132170998, 0.5098758186126159], 
[0.578706387957964, 0.4129859319513692], 
[0.5065463535393694, 0.5168847601546714], 
[0.3270693047468104, 0.8603722451897706], 
[0.5677898640297713, 0.7143889878837294], 
[0.6195137146274943, 0.5693149300741812], 
[0.5137339974604516, 0.5141304458468535], 
[0.5464334574033157, 0.4522125309331782], 
[0.41861132276454255, 0.36465982135628955], 
[0.8097066088473057, 0.5361536416697937], 
[0.5575737815908094, 0.571318401128173], 
[0.43949837926610824, 0.6687916778352397], 
[0.2619261410242419, 0.479867169315025], 
[0.7394156833349709, 0.5606615001775502], 
[0.46343882491022703, 0.5758705487851417], 
[0.4584309275009025, 0.4802036353228331], 
[0.6028110685138939, 0.5584244120451105], 
[0.47142637826626993, 0.46393702352842214], 
[0.4671459054541016, 0.44990981553661175], 
[0.6637122125167438, 0.6866887839595291], 
[0.4421107980162247, 0.26625806407211167], 
[0.37635568917859336, 0.541969448349753], 
[0.5205630345848996, 0.47209698726984817], 
[0.4526545455747543, 0.22479843491780824], 
[0.4076912276800501, 0.488570145706394], 
[0.4300368183107663, 0.5419420923680414], 
[0.7036495148273963, 0.7986366954512768], 
[0.46890635001171654, 0.8426164432788831], 
[0.46091392233256917, 0.5131656287134083], 
[0.26404613270368865, 0.688832369594773], 
[0.610312865251476, 0.6533331530920062], 
[0.5033580262164665, 0.4950427307230114], 
[0.15416244504289311, 0.36753536455369434], 
[0.5011412606348836, 0.5067665658346466], 
[0.3343114885289835, 0.5731862346345226], 
[0.5463390460973319, 0.4683998776036123], 
[0.3413907118742656, 0.765240470827275], 
[0.5811834568012678, 0.614792027509348], 
[0.478807679975577, 0.5141568509761487], 
[0.3530136890874442, 0.7925159826920014], 
[0.5699254059957393, 0.7215194646044333], 
[0.4992754604588288, 0.504922727564763], 
[0.5149768179179601, 0.42124015471033344], 
[0.48166182061564705, 0.5913676626306851], 
[0.10267820653495978, 0.4849319198995006], 
[0.6129313552957466, 0.5464945679180767]])

Y = np.array([[0.8219001136022107], 
[0.7858377841499996], 
[0.05478633084034467], 
[0.7245583717753956], 
[0.8040208231427332], 
[0.1293538036907128], 
[0.8603368629340941], 
[0.47474297952395894], 
[0.091177300298236], 
[0.037383692986609485], 
[0.13137361737252717], 
[0.25296847426680646], 
[0.8363031971346084], 
[0.8333359040425766], 
[0.7930868420658684], 
[0.38297187289605494], 
[0.05886583730480499], 
[0.9287922075566138], 
[0.04874158444964449], 
[0.16635375502570704], 
[0.12273573573086828], 
[0.37728699530682824], 
[0.5861699324816778], 
[0.2315047358939751], 
[0.10809215884371803], 
[0.9452230836026019], 
[0.7365729317720787], 
[0.21050556687572508], 
[0.9285308309147523], 
[0.6792635915355478], 
[0.16775484511593153], 
[0.6066408018019754], 
[0.5923911746072207], 
[0.11457877597495403], 
[0.5386392897926753], 
[0.8020808638555126], 
[0.3989215622884835], 
[0.5271154504770172], 
[0.7303929190173425], 
[0.835950511658156], 
[0.09525354330091107], 
[0.9855955872787963], 
[0.8017094950161733], 
[0.857416844675172], 
[0.09925686145243583], 
[0.40524030265786065], 
[0.6917830034634318], 
[0.026593069021097922], 
[0.8161986557422544], 
[0.34525379351189767], 
[0.914225817986215], 
[0.09796887123982158], 
[0.8437323222654864], 
[0.9258914900487998], 
[0.04866376948049887], 
[0.9767421546736437], 
[0.47009248211615745], 
[0.9684752572854022], 
[0.7439670797005874], 
[0.1878408852939629]])

syn0 = 2 * np.random.random((2, 10)) - 1
syn1 = 2 * np.random.random((10, 1)) - 1
for iter in xrange(60000):
    l0 = X
    l1 = nonlin(np.dot(l0, syn0))
    l2 = nonlin(np.dot(l1, syn1))
    l2_error = Y - l2
    if (iter%10000) == 0:
        print "Error:" + str(np.mean(np.abs(l2_error)))
    l2_delta = l2_error * nonlin(l2, deriv=True)
    l1_error = l2_delta.dot(syn1.T)
    l1_delta = l1_error * nonlin(l1, deriv=True)
#    l1_delta = l1_error * .0001
    syn1 += l1.T.dot(l2_delta)
    syn0 += l0.T.dot(l1_delta)
#    print np.sum(l1_error)
#print "Correct output"
#print "[[0.07161018169493694]]"
print "Output after training"
l0 = np.array([[0.4103857669330056, 0.48811656917249474]])
print nonlin(np.dot(nonlin(np.dot(l0, syn0)), syn1))