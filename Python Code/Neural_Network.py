# -*- coding: utf-8 -*-
"""
Spyder Editor

This is a temporary script file.
"""

import numpy as np

def nonlin(x, deriv = False):
    if (deriv == True):
        return x * (1 - x)
    return 1/(1+np.exp(-x))

np.random.seed(1)
X = np.array([[0.0026194568184302546], 
[0.00227464740468925], 
[0.005859664705306429], 
[0.006553318995983115], 
[0.01629493035118945], 
[0.004266217903746062], 
[0.004433876658521529], 
[0.011454061715103063], 
[0.003576161729705933], 
[0.020889378825978567], 
[0.006581179236543693], 
[0.007071685609912233], 
[0.0051505874816344084], 
[0.007414596633588074], 
[0.004223652822218868], 
[0.008616767770873914], 
[0.007672345974009824], 
[0.006515952649346286], 
[0.01328420747343178], 
[0.0018536698986171129], 
[0.007956099566233369], 
[0.005819558119834623], 
[0.006060395187747913], 
[0.01066358982254708], 
[0.009238886353270552], 
[0.006946468541186538], 
[0.012479595893536791], 
[0.0076932999172675265], 
[0.006239362933668485], 
[9.638897897126298E-4], 
[0.0023687431843274244], 
[0.0076334204197896155], 
[0.001602354898030548], 
[0.007238828752016578], 
[0.004016478635720892], 
[0.010959244607269672], 
[0.02220276288780677], 
[0.008287344649109277], 
[0.00582580697157369], 
[0.009226539368591821], 
[0.02647445375907292], 
[0.00479499383421846], 
[0.003575799190072992], 
[0.006917395219871556], 
[0.007803223455589447], 
[0.0036068546731157134], 
[0.0027932628147888526], 
[0.006415957228078941], 
[0.006158965647738744]])


Y = np.array([[0.749169603133633], 
[0.7081771577767972], 
[0.8499131008472726], 
[0.6416150497796635], 
[0.472974607208604], 
[0.7706967535783167], 
[0.8666634810625494], 
[0.5225927322338575], 
[0.7482874244549028], 
[0.46342108804788373], 
[0.10940707715963206], 
[0.6082488881655169], 
[0.03943924586404134], 
[0.3529266321748695], 
[0.7570046959990305], 
[0.34017011740945907], 
[0.1948376806913047], 
[0.11016418540707341], 
[0.2893609085888019], 
[0.7567709362468864], 
[0.47568867846770196], 
[0.7456246530391095], 
[0.662735490555898], 
[0.3908077080440441], 
[0.27553406801647307], 
[0.4326215165434698], 
[0.40144165288417116], 
[0.5197648011752563], 
[0.9966392432171135], 
[0.8439523482786764], 
[0.8165936333713502], 
[0.48197242458367706], 
[0.7807097906186019], 
[0.30708475664392193], 
[0.9033868245563864], 
[0.38557454308798306], 
[0.49161183439277234], 
[0.18164471066969579], 
[0.7779640193989665], 
[0.3704725252374394], 
[0.5167159320330156], 
[0.6803682230122733], 
[0.7932415617546857], 
[0.6351277527092274], 
[0.591179711537946], 
[0.8908100030892326], 
[0.7201394181998062], 
[0.7106150222851793], 
[0.9559296505394873]])

syn0 = 2 * np.random.random((1, 30)) - 1
syn1 = 2 * np.random.random((30, 1)) - 1
for iter in xrange(60000):
    l0 = X
    l1 = nonlin(np.dot(l0, syn0))
    l2 = nonlin(np.dot(l1, syn1))
    l2_error = Y - l2
    if (iter%10000) == 0:
        print "Error:" + str(np.mean(np.abs(l2_error)))
    l2_delta = l2_error * nonlin(l2, deriv=True)
    l1_error = l2_delta.dot(syn1.T)
    l1_delta = l1_error * nonlin(l1, deriv=True)
#    l1_delta = l1_error * .0001
    syn1 += l1.T.dot(l2_delta)
    syn0 += l0.T.dot(l1_delta)
#    print np.sum(l1_error)
print "Output after training"
l0 = np.array([[0.005881464786790345]])
print nonlin(np.dot(nonlin(np.dot(l0, syn0)), syn1))